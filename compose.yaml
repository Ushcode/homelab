version: "3.8"

services:
  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    environment:
      - PUID:1000
      - PGID:1000
    ports:
      - 3000:3000
    volumes:
      - ./dashboard/config:/app/config
      - ./dashboard/media:/app/public/images
      - /var/run/docker.sock:/var/run/docker.sock:ro # optional, for docker integrations
    restart: on-failure[3]

  plex:
    image: linuxserver/plex
    container_name: plex
    restart: on-failure[3]
    network_mode: host
    volumes:
      - /home/iqbal/plex/config:/config
      - /home/tv:/tv
      - /home/movies:/movies
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - VERSION=docker
      - PLEX_CLAIM= #optional

  overseer:
    image: linuxserver/overseerr:latest
    container_name: overseer
    restart: on-failure[3]
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      # - OVERSEER_DATABASE_URL=postgres:///overseerr.db # must configure
    volumes:
      - ./overseerr/config:/config
    ports:
      - 5055:5055

  sonarr:
    image: linuxserver/sonarr
    container_name: sonarr
    restart: on-failure[3]
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
    volumes:
      - /sonarr/config:/config
      - /home/iqbal/plex/media/tv:/tv #optional
      # - /path/to/downloadclient-downloads:/downloads #optional
    ports:
      - "8989:8989"

  radarr:
    image: linuxserver/radarr
    container_name: radarr
    restart: on-failure[3]
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
    volumes:
      - /radarr/config:/config
      - /home/iqbal/plex/media/movies:/movies #optional
      # - /path/to/downloadclient-downloads:/downloads #optional
    ports:
      - 7878:7878

  prowlarr:
    image: linuxserver/prowlarr
    container_name: prowlarr
    restart: on-failure[3]
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
    volumes:
      - /prowlarr:/config
    ports:
      - 9696:9696

  flaresolverr:
    # DockerHub mirror flaresolverr/flaresolverr:latest
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_HTML=${LOG_HTML:-false}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
      - TZ=Etc/UTC
    ports:
      - "${PORT:-8191}:8191"
    restart: on-failure[3]

  unpackerr:
    image: golift/unpackerr
    container_name: unpackerr
    volumes:
      # You need at least this one volume mapped so Unpackerr can find your files to extract.
      # Make sure this matches your Starr apps; the folder mount (/downloads or /data) should be identical.
      - /mnt/HostDownloads:/downloads
    # Get the user:group correct so unpackerr can read and write to your files.
    user: 1000:1000
    #user: 1000:1000
    # What you see below are defaults for this compose. You only need to modify things specific to your environment.
    # Remove apps and feature configs you do not use or need. 
    # ie. Remove all lines that begin with UN_CMDHOOK, UN_WEBHOOK, UN_FOLDER, UN_WEBSERVER, and other apps you do not use.
    environment:
      - TZ=Etc/UTC
      # General config
      - UN_DEBUG=false
      - UN_LOG_FILE=
      - UN_LOG_FILES=10
      - UN_LOG_FILE_MB=10
      - UN_INTERVAL=2m
      - UN_START_DELAY=1m
      - UN_RETRY_DELAY=5m
      - UN_MAX_RETRIES=3
      - UN_PARALLEL=1
      - UN_FILE_MODE=0644
      - UN_DIR_MODE=0755
      # Sonarr Config
      - UN_SONARR_0_URL=http://sonarr:8989
      - UN_SONARR_0_API_KEY=
      - UN_SONARR_0_PATHS_0=/downloads
      - UN_SONARR_0_PROTOCOLS=torrent
      - UN_SONARR_0_TIMEOUT=10s
      - UN_SONARR_0_DELETE_ORIG=false
      - UN_SONARR_0_DELETE_DELAY=5m
      # Radarr Config
      - UN_RADARR_0_URL=http://radarr:7878
      - UN_RADARR_0_API_KEY=
      - UN_RADARR_0_PATHS_0=/downloads
      - UN_RADARR_0_PROTOCOLS=torrent
      - UN_RADARR_0_TIMEOUT=10s
      - UN_RADARR_0_DELETE_ORIG=false
      - UN_RADARR_0_DELETE_DELAY=5m
      # Lidarr Config
      - UN_LIDARR_0_URL=http://lidarr:8686
      - UN_LIDARR_0_API_KEY=
      - UN_LIDARR_0_PATHS_0=/downloads
      - UN_LIDARR_0_PROTOCOLS=torrent
      - UN_LIDARR_0_TIMEOUT=10s
      - UN_LIDARR_0_DELETE_ORIG=false
      - UN_LIDARR_0_DELETE_DELAY=5m
      # Readarr Config
      - UN_READARR_0_URL=http://readarr:8787
      - UN_READARR_0_API_KEY=
      - UN_READARR_0_PATHS_0=/downloads
      - UN_READARR_0_PROTOCOLS=torrent
      - UN_READARR_0_TIMEOUT=10s
      - UN_READARR_0_DELETE_ORIG=false
      - UN_READARR_0_DELETE_DELAY=5m
      # Folder Config
      - UN_FOLDER_0_PATH=
      - UN_FOLDER_0_EXTRACT_PATH=
      - UN_FOLDER_0_DELETE_AFTER=10m
      - UN_FOLDER_0_DELETE_ORIGINAL=false
      - UN_FOLDER_0_DELETE_FILES=false
      - UN_FOLDER_0_MOVE_BACK=false
      # Webhook Config
      - UN_WEBHOOK_0_URL=
      - UN_WEBHOOK_0_NAME=
      - UN_WEBHOOK_0_NICKNAME=Unpackerr
      - UN_WEBHOOK_0_CHANNEL=
      - UN_WEBHOOK_0_TIMEOUT=10s
      - UN_WEBHOOK_0_SILENT=false
      - UN_WEBHOOK_0_IGNORE_SSL=false
      - UN_WEBHOOK_0_EXCLUDE_0=
      - UN_WEBHOOK_0_EVENTS_0=0
      - UN_WEBHOOK_0_TEMPLATE_PATH=
      - UN_WEBHOOK_0_CONTENT_TYPE=application/json
      # Command Hook Config
      - UN_CMDHOOK_0_COMMAND=
      - UN_CMDHOOK_0_NAME=
      - UN_CMDHOOK_0_TIMEOUT=10s
      - UN_CMDHOOK_0_SILENT=false
      - UN_CMDHOOK_0_SHELL=false
      - UN_CMDHOOK_0_EXCLUDE_0=
      - UN_CMDHOOK_0_EVENTS_0=0
      # Web Server Config
      - UN_WEBSERVER_METRICS=false
      - UN_WEBSERVER_LISTEN_ADDR=0.0.0.0:5656
      - UN_WEBSERVER_LOG_FILE=
      - UN_WEBSERVER_LOG_FILES=10
      - UN_WEBSERVER_LOG_FILE_MB=10
      - UN_WEBSERVER_SSL_CERT_FILE=
      - UN_WEBSERVER_SSL_KEY_FILE=
      - UN_WEBSERVER_URLBASE=/
      - UN_WEBSERVER_UPSTREAMS=

    security_opt:
      - no-new-privileges:true
    restart: on-failure[3]

  cloudflared: 
    image: cloudflare/cloudflared 
    container_name: cloudflared-tunnel
    restart: on-failure[3] 
    command: tunnel run 
    environment: 
      - TUNNEL_TOKEN=abcdefghijklmnopqrstuvwxyz0123456789

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
      - WEBUI_PORT=1916
      - TORRENTING_PORT=6881
    volumes:
      - /path/to/appdata/config:/config
      - /path/to/downloads:/downloads
    ports:
      - 1916:1916
      - 6881:6881
      - 6881:6881/udp
    restart: on-failure[3]
    depends_on:
      - Vpn

  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    restart: on-failure[3]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /portainer/data:/data
    ports:
      - "9000:9000"

  postgres:
    image: postgres:latest
    container_name: postgres
    restart: on-failure[3]
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=postword

  pgAdmin:
    image: dpage/pgadmin4:latest
    container_name: pgAdmin
    restart: on-failure[3]
    ports:
      - "5435:5435"
    environment:
      - PGADMIN_DEFAULT_EMAIL=oisinpeppard@hotmail.com
      - PGADMIN_DEFAULT_PASSWORD=postword

  nginx:
    container_name: nginx
    image: nginx
    volumes:
     - ./templates:/etc/nginx/templates
    ports:
    - 8080:80
    environment:
    - NGINX_HOST=foobar.com
    - NGINX_PORT=80

  Vpn:
    image: ghcr.io/bubuntux/nordvpn
    container_name: nordvpn
    cap_add:
      - NET_ADMIN # Required
      - NET_RAW # Required
    environment:
      # Review https://github.com/bubuntux/nordvpn#environment-variables
      - TOKEN=e9f2ab9f0da02a21021442a333a727ca1bb5c8ca0a8f08dddf5d3b5632df0b75 # Required
      - CONNECT=United_Kingdom
      - TECHNOLOGY=NordLynx
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=1 # Recomended if using ipv4 only
  # torrent:
  #   image: ghcr.io/linuxserver/qbittorrent
  #   network_mode: container:vpn
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.services.torrent.loadbalancer.server.port=8080
  #     - traefik.http.routers.torrent.rule=Host(`custom-host`)


  # Make sure that custom-host resolves to the ip address of the server 
  # for example /etc/hosts contains 127.0.0.1  custom-host
  # the torrent service would be available at http://custom-host

  navidrome:
    image: deluan/navidrome:latest
    user: 1000:1000 # should be owner of volumes
    ports:
      - "4533:4533"
    restart: on-failure[3]
    environment:
      # Optional: put your config options customization here. Examples:
      ND_SCANSCHEDULE: 1h
      ND_LOGLEVEL: info
      ND_SESSIONTIMEOUT: 24h
      ND_BASEURL: ""
    volumes:
      - "./navidrome/config:/data"
      - "/home/music/:/music:ro"

  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    network_mode: "host"
    environment:
      - TZ=Etc/UTC
      - WEBPASSWORD=postword
    ports:
      - 80:8081
    volumes:
      - './etc-pihole:/etc/pihole'
      - './etc-dnsmasq.d:/etc/dnsmasq.d'
    #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
    cap_add:
      - NET_ADMIN # Required if you are using Pi-hole as your DHCP server, else not needed
    restart: on-failure[3]